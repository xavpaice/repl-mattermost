---
# Source: repl-mattermost/charts/replicated/templates/replicated-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: replicated-0.0.1-alpha.17
    app.kubernetes.io/name: replicated
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.1-alpha.17"
    app.kubernetes.io/managed-by: Helm
  name: replicated
---
# Source: repl-mattermost/charts/mattermost-team-edition/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-mysql
  namespace: xavpaice
  labels:
    app: release-name-mysql
    chart: "mysql-1.6.4"
    release: "release-name"
    heritage: "Helm"
type: Opaque
data:
  
  
  mysql-root-password: "RUs5eEJ3WGZIZw=="
  
  
  
  mysql-password:  "c2FtcGxlUGFzc3dvcmQ="
---
# Source: repl-mattermost/charts/mattermost-team-edition/templates/secret-config.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-mattermost-team-edition-config
  labels:
    app.kubernetes.io/name: mattermost-team-edition
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: mattermost-team-edition-6.6.28
type: Opaque
data:
  MM_PLUGINSETTINGS_CLIENTDIRECTORY: Li9jbGllbnQvcGx1Z2lucw==
---
# Source: repl-mattermost/charts/mattermost-team-edition/templates/secret-mattermost-dbsecret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-mattermost-team-edition-mattermost-dbsecret
  labels:
    app.kubernetes.io/name: mattermost-team-edition
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart:  mattermost-team-edition-6.6.28
type: Opaque
data:
  mattermost.dbsecret: bXlzcWw6Ly9zYW1lcGxlVXNlcjpzYW1wbGVQYXNzd29yZEB0Y3AocmVsZWFzZS1uYW1lLW15c3FsOjMzMDYpL21hdHRlcm1vc3Q/Y2hhcnNldD11dGY4bWI0LHV0ZjgmcmVhZFRpbWVvdXQ9MzBzJndyaXRlVGltZW91dD0zMHM=
---
# Source: repl-mattermost/charts/replicated/templates/replicated-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    helm.sh/chart: replicated-0.0.1-alpha.17
    app.kubernetes.io/name: replicated
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.1-alpha.17"
    app.kubernetes.io/managed-by: Helm
  name: replicated
type: Opaque
stringData:
  REPLICATED_LICENSE_BASE64: YXBpVmVyc2lvbjoga290cy5pby92MWJldGExCmtpbmQ6IExpY2Vuc2UKbWV0YWRhdGE6CiAgbmFtZTogeGF2LWxpY2Vuc2UKc3BlYzoKICBhcHBTbHVnOiByZXBsLW1hdHRlcm1vc3QKICBjaGFubmVsSUQ6IDJSaWlKV2xSMzVBRExtR1IwRVVYQUk1MlV2dwogIGNoYW5uZWxOYW1lOiBVbnN0YWJsZQogIGN1c3RvbWVyRW1haWw6IHhhditidWlsZGVyMkByZXBsaWNhdGVkLmNvbQogIGN1c3RvbWVyTmFtZTogeGF2LWxpY2Vuc2UKICBlbmRwb2ludDogaHR0cHM6Ly9yZXBsaWNhdGVkLmFwcAogIGVudGl0bGVtZW50czoKICAgIGV4cGlyZXNfYXQ6CiAgICAgIGRlc2NyaXB0aW9uOiBMaWNlbnNlIEV4cGlyYXRpb24KICAgICAgc2lnbmF0dXJlOiB7fQogICAgICB0aXRsZTogRXhwaXJhdGlvbgogICAgICB2YWx1ZTogIjIwMjMtMDctMTdUMDA6MjY6NDRaIgogICAgICB2YWx1ZVR5cGU6IFN0cmluZwogICAgaG9zdG5hbWU6CiAgICAgIGhlbG1QYXRoOiAuVmFsdWVzLmluZ3Jlc3MuaG9zdG5hbWUKICAgICAgc2lnbmF0dXJlOiB7fQogICAgICB0aXRsZTogSW5zdGFuY2UgaG9zdG5hbWUKICAgICAgdmFsdWU6IG1hdHRlcm1vc3QueGF2cGFpY2Uub2tldG8ucmVwbGRldi5jb20KICAgICAgdmFsdWVUeXBlOiBTdHJpbmcKICBpc0dpdE9wc1N1cHBvcnRlZDogdHJ1ZQogIGlzU25hcHNob3RTdXBwb3J0ZWQ6IHRydWUKICBsaWNlbnNlSUQ6IDJSaXdDcUlWa1J3SlhLR0E0UWZReE5pZUpmVgogIGxpY2Vuc2VTZXF1ZW5jZTogMQogIGxpY2Vuc2VUeXBlOiB0cmlhbAogIHNpZ25hdHVyZTogZXlKc2FXTmxibk5sUkdGMFlTSTZJbVY1U21oalIyeFhXbGhLZW1GWE9YVkphbTlwWVRJNU1HTjVOWEJpZVRreVRWZEtiR1JIUlhoSmFYZHBZVEpzZFZwRFNUWkphM2h3V1RKV2RXTXlWV2xNUTBwMFdsaFNhRnBIUmpCWlUwazJaWGxLZFZsWE1XeEphbTlwWlVkR01reFhlSEJaTWxaMVl6SlZhV1pUZDJsak0wSnNXWGxKTm1WNVNuTmhWMDVzWW01T2JGTlZVV2xQYVVsNVZXMXNNMUV6UmtwV2JYUlRaREJ3V1ZNd1pFSk9Sa1p0VlZob1QyRlhWa3RhYkZscFRFTktjMkZYVG14aWJrNXNWa2hzZDFwVFNUWkpibEo1WVZkR2MwbHBkMmxaTTFaNlpFYzVkRnBZU2s5WlZ6RnNTV3B2YVdWSFJqSk1WM2h3V1RKV2RXTXlWV2xNUTBwcVpGaE9NR0l5TVd4amExWjBXVmRzYzBscWIybGxSMFl5U3pKS01XRlhlR3RhV0VsNVVVaEtiR05IZUhCWk1rWXdXbGRSZFZreU9YUkphWGRwV1ZoQ2QxVXllREZhZVVrMlNXNUtiR05IZDNSaVYwWXdaRWRXZVdKWE9YcGtRMGx6U1cxT2IxbFhOWFZhVjNoS1VrTkpOa2xxU2xOaFYyeExWako0VTAxNlZrSlNSWGgwVWpGSmQxSldWbGxSVldzeFRXeFdNbVI1U1hOSmJVNXZXVmMxZFZwWGVFOVpWekZzU1dwdmFWWlhOWHBrUjBacFlrZFZhVXhEU25OaFYwNXNZbTVPYkZVeVZuaGtWMVoxV1RKVmFVOXFSWE5KYlZaMVdraENkbUZYTlRCSmFtOXBZVWhTTUdOSVRUWk1lVGw1V2xoQ2MyRlhUbWhrUjFaclRHMUdkMk5EU1hOSmJWWjFaRWRzTUdKSFZuUmFWelV3WTNsSk5tVjVTbXhsU0VKd1kyMVdlbGd5UmpCSmFuQTNTVzVTY0dSSGVHeEphbTlwVWxob2QyRllTbWhrUjJ4MlltbEpjMGx0VW14ak1rNTVZVmhDTUdGWE9YVkphbTlwVkVkc2FscFhOWHBhVTBKR1pVaENjR050UmpCaFZ6bDFTV2wzYVdSdFJuTmtWMVZwVDJsSmVVMUVTWHBNVkVFelRGUkZNMVpFUVhkUGFra3lUMnBSTUZkcFNYTkpibHBvWWtoV2JGWkliSGRhVTBrMlNXeE9NR050YkhWYWVVbHpTVzVPY0ZveU5XaGtTRlo1V2xOSk5tVXpNVGxNUTBwdllqTk9NR0p0Um5SYVUwazJaWGxLTUdGWVVuTmFVMGsyU1d0c2RXTXpVbWhpYlU1c1NVZG9kbU16VW5WWlZ6RnNTV2wzYVdSdFJuTmtWMVZwVDJsS2RGbFlVakJhV0VwMFlqTk9NRXh1YUdoa2JrSm9ZVmRPYkV4dE9YSmFXRkoyVEc1S2JHTkhlR3RhV0ZsMVdUSTVkRWxwZDJsa2JVWnpaRmRXVldWWVFteEphbTlwVlROU2VXRlhOVzVKYVhkcFlVZFdjMkpXUW1oa1IyZHBUMmxKZFZadFJuTmtWMVo2VEcxc2RWb3pTbXhqTTAxMVlVYzVlbVJITldoaVYxVnBURU5LZW1GWFpIVlpXRkl4WTIxVmFVOXVkRGxtV0RCelNXMXNlbEl5YkRCVU0wSjZWVE5XZDJOSE9YbGtSMVpyU1dwd01HTnVWbXhNUTBwd1l6Rk9kVmxZUW5waFJ6a3dWVE5XZDJOSE9YbGtSMVpyU1dwd01HTnVWbXhtV0RBOUlpd2lhVzV1WlhKVGFXZHVZWFIxY21VaU9pSmxlVXB6WVZkT2JHSnVUbXhWTW14dVltMUdNR1JZU214SmFtOXBWbTFKZWxKSGRIcGFiRmsxV2tSSk1Fd3phRkpqTWpGMllVVlpOVkZyUmpCaWVUa3dWbFJPU0ZkR1ZuSmFhVGcwWTBkMGFWZFZNVEZYYTNCM1lqSTVRMU15ZUd0a1ZYTTBUV3RvTUUxclZsWk1NRFZXWVRCT2VGWldTbEJXVmxvd1N6STRlbEp1UWxka1ZXaFNaR3BPYjFwV1NuSlZhM0JJVjBWYWRsSnRiekZYYm5Cb1lqTkdSMkpWVG10UlZWcE9XWHBvY0ZsVk9IcGthbVJVVFZjNE5GRnJUa3hTVkVad1dXdGtNbFpZUmpWWFJrSlBVMVJrUmxGdFNrUmphbHB0WlVoT1MxVldUbEpPUkVKNVkycGFTR1JWZEZWaFZFSlFVMnBvYTFSNlpESmpNRVV3WVd4d01sTnFRWEpXVlZVMFpHNXNURlZ0ZUhoT1ZFcHJWV3h3ZUU5VmRITk5Sa0pzVTBNNWVHSXpXbTlhTURFMFpVUk9UbVZHV201alIwcEpZekExVmxOcmFHcGtWV2N6VWxab2IyUjZXa1ZpTVVKWFl6QlNVMUZVU2pCTlUzUnpUREprWVdGclJteGphMVp1V1ROU1FtUnJPSHBUYmtwd1VrZFdWbE5UZEhoalJscEpWRmMxZFZwSGRHOVViV1I0V1c1S2FXUkVWVE5SVTNSVlRUTkdiR0pyTUROYU1EVjVWVlJzUzFOSFpGcFVVemxLVTJwa1VWZEZWa0psUm5BMlltNVplV042Um5CVFIxcFhZekZOTkZSSVZUUlVNVmswVldwYVlWVjZXazVSTW13elVGUXdhVXhEU25ka1YwcHpZVmRPVEZwWWEybFBhVWwwVEZNd2RFeFZTa1pTTUd4UFNVWkNWbEZyZUVwUmVVSk1VbFpyZEV4VE1IUk1WbmgxVkZWc1NsRnJiSEZSVlRWRFdqSjBlR0ZIZEhCU2Vtd3pUVVZLUWxWVlZrZFJWVVpRVVRCR1VrOUZSazVUVld4RFVUSmtURkV3UmxKU1ZVWjVVbFZHZFZwNWMzaFpNa1Z5WVVWNFFsZHRWblZXUjBwU1pHeDRkVTFWWXpWV1ZtUlpaV3BvTUdOcWFIVmpibWh4VmtaSmNtRkhNVTVoVlhBMlZtcFdUVTF0T0RWWk1VWktUakZWZWt3elVUUmxiVXBvVGpCR1ZFNXNUbEJrVlhCclVsZEpNMlJGZUhSYU0yeFlWMnBvYzA1R2VIVmlTSEJQWTFWU05WZEZjSEpWVjNRMVpHNVdkMUp0VGxoT1YxSnBVa2RzTUZkRmJFeGpTRnB0VVZSU2NXVkVSbGxoTW1jeFZrZDRSRXd3U2xwVGJrcENUbFZHZEZWRVdUSlVSVVp2VTBWb1NGUXlkRmRPTVhoMVRVYzVlVkZyU1RWYVJGcDZVM3BuTVZwcmRIQldiVVkyVGxVd2RsTXlOVFJqYmxsNFRERmFjazB3U1RGbFdFSkVXbXRTU21SclZsWmxhM2hDVVZoR1VWcElWbTVPYXpGU1dsVmFSRkpHVmxkamF6UnlaREY0ZFZadVZsZFRibkI0VjFaWk0yTlhSbXBPYkdoUFpHMUdXazB5U1RWT1EzUlhZVVpTYVZGVWFGQmpSa0p1V1ZSb1ZGSkVTbTlaTWpsQ1ltMVdSMlZIVWpKa2JrcFRWRU56ZW1SV1VsaGtWVzl5VWxob1VXUldlSFZqVjFKeVZGaE9hRmt5ZUhCaVJFRXpZakZDUlZaWFNrcFphbEpYWlZVNWRWSkhiRlphUkVadlpXNUtSMlJzYkZwVk1qVnpWSHBLY0Zrd2JFWlhhM0JJV2tack1GRnJiSEZWUlRnd1dqRkpNMk5zVWxwWk1YaDFUMVpHU2xKRlJsSlJWVXBqWW1rd2RFeFRNSFJTVlRWRlNVWkNWbEZyZUVwUmVVSk1VbFpyZEV4VE1IUk1WbmgxU1dsM2FXRXlWalZWTW14dVltMUdNR1JZU214SmFtOXBXbGhzUzJWdFJsaGFTRlphVjBaSmVGa3lNVlpoVlRsd1UyMDFVbUp0VWxSWGFrSnpVekpLUjJGRVJtcGhNbEV4V1dwQ1MyTXlWa2hUYlVaU1lsZG9UMWw2VG10WFZsSTJVMjVXYUZKNmJFNVdNRnBEVVRBd2VVMVlXbXBTYTFwNldsYzFSMWRyTVVsVVZFNVVVbFphV1ZVeFl6RlpWbEpXVFZWNFQxWXhWakpaTVdRMFZVWldXRkpzYkZWbFZHeFVXbFpXVjFZeVZuRlZXR3hUVFZkb2RsWkdWa1pqYXpGMFRWVldVMUl3V2paVWEwNHdUVEZXZEZwRmJGaFNNbWd3VmtjMVQwNXNjSEZSYlhoVllUTlNVRmRVUmtkT2JGWjBZMGhTV0dGc1NuWldWM1JoVGxaVmVscEhiRlpXYXpWVVZteGtUMWxWT1VsV1dIQmFUVWRvU2xwSE5VTmpWMVpWVld4YWJGSkZXakJVU0hCYVRWZE5lV0pGWkdsbGJFVXhWbXRhUm1Oc1VrZFJibVJzVmxaYVVWWnJVbUZpTVVWNVlrVTFhRkpXYTNwVVZsWTBZVlpLVlZwRmVGZE5SM2hXVkVSQmVHRldaSFJQVjJoWFltdHdSMVpXVms1TmJFcEdaRVZ3VUZKV1duZFVNVkp6VjJ4R2RWRnJXbGROUkVaNFZHNXdZV1Z0VGxaVmJscHBVWHBzTlZaRlVsZE5SWFEyWWtoU2ExTklRalJXVjNSS1RURkdkVk5yWkdwU1JUUjNWMjB3TkdOc1JsWldiRnBRVWxoT01sWkdhR0ZTYXpSNlVtNWFiRkpHV205WmJHUnZZVmRXU1ZKVVFsWk5NVXBvV1cwd01XRkdWblJsUld4U1pWaFJkMVpxUWtaTlZrbDVWbFJPV0ZOSGFHRldSbFphVFZaU2RGTlVTazVsYldod1ZrWm9hMkpXYjNoYVJsWnBaV3hhVFZONlFrZGhNVVpVVDFST1UySkZSalJaYlhSTFlWWmtSbFJyTlZSTk1qazFWRlZXWVdGc2IzZGFTRkpZVWxWYWVsbFZZelZOTWxaMVVXczFXR0pJUW5sVVZsWnZWbXN4YzFKVVZsWlNNVVY1VlRCYVYyRXhXa2xaZW14UlZUQnNlbE5YTVd0ak1rbDVVMjFvYVZKWVVuTmFWbFp6WVRCc2NXSXliRnBpVmtwelYyeFNWazFyTlZWWFdHUmFUV3h3Y0ZSclVrOWhhemxZVTFoc1VGSXdjSFJVTVZKdllrWnNXRlJ0YUdGaVZWVjVWR3RTV21GWFdsSlFWREJwWmxFOVBTSjkK
  REPLICATED_LICENSE_FIELDS_BASE64: ZXhwaXJlc19hdDoKICBkZXNjcmlwdGlvbjogTGljZW5zZSBFeHBpcmF0aW9uCiAgbmFtZTogZXhwaXJlc19hdAogIHNpZ25hdHVyZToKICAgIHYxOiBvei9LM0phbUZwbitXMHFEYWIyekd6NGNNZ0E3RnFuOXBEck5rTG9GM0FxSmRsbGNVYjFuN0F4M2xWSWJnd1RlUStIazQyQ01JMXhDSER1aEFVMTZWRHU0WFIzMk1xVW1uSUVtL2FYamRBbTRlWFpnZ2JLMUh6V0ZkQTRhRHBFaVRnMUR1SU5vYml6SGhBbkRyZFl0anJZdllMZ3NyT1NOT3lzRkxKbklZMHNuelFaSHJmQUZrc1puZGovaUJra2tWc0RicDVuQzVUeWFIOGtkVWNLK3JjT1l0NDJwekJCZVFselNpa3c0R2x3OW1Kc0w1R1MzNHdqOWI1OCtaTGlXbjRFUHhnbTZlNEpveDhTZnJpVHZoaVRYSVJVbUxZQzVNQnpFNkJLWEdoaUNvWlMrMVNsU1RhcWU4dExQU2g0WUE2OXZUK1B2SE5nbjNDc25PQTIzUUE9PQogIHRpdGxlOiBFeHBpcmF0aW9uCiAgdmFsdWU6ICIyMDIzLTA3LTE3VDAwOjI2OjQ0WiIKICB2YWx1ZVR5cGU6IFN0cmluZwpob3N0bmFtZToKICBoZWxtUGF0aDogLlZhbHVlcy5pbmdyZXNzLmhvc3RuYW1lCiAgbmFtZTogaG9zdG5hbWUKICBzaWduYXR1cmU6CiAgICB2MTogVUxLaTNwUHcvMTVQN3pIc25aRHB4ZzdTM1hrcFZ4NGxza0wybklFa1Z5aFN4M3hObEZTNVpvU1FXTUZ4SEJhb3o3RzhDV2xwUUNGbytrdENvOUwzU012dXY3T3poT1g5MFdGeUx3WFRvQlpPSUJoZDZBdDhHZnFWN0hNQW01SzFJSmVNNERwY3BRODFIeW95MHNLdG9lcUltZXZ0TXcvRWo2WTBhZUhqTG90OE1wWnBJV3I5MzFLcFFhMFlIOWJScVduQUZmUzBTcnRPRkNvcTQrTWI3Tlh4YmZIend2a1VVQ24vMTgvVmt0dFQ1aHFLUXlyVjA2WGFFNnY3T1pDL3hFT2t5Uk0zbGVLQURNY1pmQkZNNU9OWnhKa1oreC9XVngyenByNWJRNGxralM0NFBuak1nUEpFRSsyVDJRUVlDOVo5c2xKZnhGVVlDOWIycExSNEpnPT0KICB0aXRsZTogSW5zdGFuY2UgaG9zdG5hbWUKICB2YWx1ZTogbWF0dGVybW9zdC54YXZwYWljZS5va2V0by5yZXBsZGV2LmNvbQogIHZhbHVlVHlwZTogU3RyaW5n
  REPLICATED_APP_NAME: "repl-mattermost"
  REPLICATED_CHANNEL_ID: "2RiiJWlR35ADLmGR0EUXAI52Uvw"
  REPLICATED_CHANNEL_NAME: "Unstable"
  REPLICATED_CHANNEL_SEQUENCE: "9"
  REPLICATED_RELEASE_SEQUENCE: "9"
  REPLICATED_RELEASE_IS_REQUIRED: "false"
  REPLICATED_RELEASE_CREATED_AT: "2023-06-26T03:47:49Z"
  REPLICATED_RELEASE_NOTES: |-
    
  REPLICATED_VERSION_LABEL: "0.0.1"
  REPLICATED_INFORMERS_LABEL_SELECTOR: 'app.kubernetes.io/managed-by=Helm,app.kubernetes.io/name!=replicated,app.kubernetes.io/instance=release-name'
---
# Source: repl-mattermost/templates/preflight.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    troubleshoot.sh/kind: preflight
  name: "release-name-preflight-config"
stringData:
  # This is the preflight spec that will be used to run the preflight checks
  # Note: here we demonstrate using Helm's templating to conditionally run a preflight check based on a value
  # plus getting some configuration from the local values.yaml file
  preflight.yaml: |
    apiVersion: troubleshoot.sh/v1beta2
    kind: Preflight
    metadata:
      name: preflight-sample
    spec:
      analyzers:
        - clusterVersion:
            outcomes:
              - fail:
                  when: "< 1.22.0"
                  message: The application requires at least Kubernetes 1.22.0, and recommends 1.23.0.
                  uri: https://kubernetes.io
              - warn:
                  when: "< 1.23.0"
                  message: Your cluster meets the minimum version of Kubernetes, but we recommend you update to 1.18.0 or later.
                  uri: https://kubernetes.io
              - pass:
                  message: Your cluster meets the recommended and required versions of Kubernetes.
---
# Source: repl-mattermost/templates/supportbundle.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    troubleshoot.sh/kind: support-bundle
  name: release-name-support-bundle
  namespace: xavpaice
type: Opaque
stringData:
  # This is the support bundle spec that will be used to generate the support bundle
  # Notes: we use xavpaice to ensure that the support bundle is scoped to the release namespace
  # We can use any of Helm's templating features here, including 
  support-bundle-spec: |
    apiVersion: troubleshoot.sh/v1beta2
    kind: SupportBundle
    metadata:
      name: support-bundle
    spec:
      collectors:
        - clusterInfo: {}
        - clusterResources: {}
        - logs:
            selector:
              - app=someapp
              - component=nginx
            namespace: xavpaice
            limits:
              maxAge: 720h # 30*24
              maxLines: 10000
              maxBytes: 5000000
        - logs:
            collectorName: all-logs
            name: all-logs
      analyzers:
        - ingress:
            namespace: default
            ingressName: repl-mattermost-mattermost-team-edition
            outcomes:
              - fail:
                  message: The ingress isn't ingressing
              - pass:
                  message: All systems ok on ingress
        - deploymentStatus:
            name: repl-mattermost-mattermost-team-edition
            namespace: default
            outcomes:
              - fail:
                  when: "< 1"
                  message: The API deployment does not have any ready replicas.
              - warn:
                  when: "= 1"
                  message: The API deployment has only a single ready replica.
              - pass:
                  message: There are multiple replicas of the API deployment ready.
---
# Source: repl-mattermost/charts/mattermost-team-edition/templates/tests/mattermost-config-test.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-mattermost-team-edition-tests
  labels:
    app.kubernetes.io/name: mattermost-team-edition
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: mattermost-team-edition-6.6.28
data:
  run.sh: |-
    #!/usr/bin/env bats
    @test "Testing Mattermost is accessible" {
      url="http://mattermost-team-edition.xavpaice.svc.cluster.local:8065"
      code=$(wget --server-response --spider --timeout 10 --tries 1 ${url} 2>&1 | awk '/^  HTTP/{print $2}')
      [ "$code" == "200" ]
    }
---
# Source: repl-mattermost/charts/mattermost-team-edition/charts/mysql/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-mysql
  namespace: xavpaice
  labels:
    app: release-name-mysql
    chart: "mysql-1.6.4"
    release: "release-name"
    heritage: "Helm"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
# Source: repl-mattermost/charts/mattermost-team-edition/templates/pvc-plugins.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-mattermost-team-edition-plugins
  labels:
    app.kubernetes.io/name: mattermost-team-edition
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: mattermost-team-edition-6.6.28
  annotations:
spec:
  accessModes:
  - "ReadWriteOnce"
  resources:
    requests:
      storage: "1Gi"
---
# Source: repl-mattermost/charts/mattermost-team-edition/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-mattermost-team-edition
  labels:
    app.kubernetes.io/name: mattermost-team-edition
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: mattermost-team-edition-6.6.28
  annotations:
spec:
  accessModes:
  - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
# Source: repl-mattermost/charts/replicated/templates/replicated-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: replicated-0.0.1-alpha.17
    app.kubernetes.io/name: replicated
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.1-alpha.17"
    app.kubernetes.io/managed-by: Helm
  name: replicated-role
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - '*'
---
# Source: repl-mattermost/charts/replicated/templates/replicated-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: replicated-0.0.1-alpha.17
    app.kubernetes.io/name: replicated
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.1-alpha.17"
    app.kubernetes.io/managed-by: Helm
  name: replicated-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: replicated-role
subjects:
- kind: ServiceAccount
  name: replicated
  namespace: xavpaice
---
# Source: repl-mattermost/charts/mattermost-team-edition/charts/mysql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-mysql
  namespace: xavpaice
  labels:
    app: release-name-mysql
    chart: "mysql-1.6.4"
    release: "release-name"
    heritage: "Helm"
  annotations:
spec:
  type: ClusterIP
  ports:
  - name: mysql
    port: 3306
    targetPort: mysql
  selector:
    app: release-name-mysql
---
# Source: repl-mattermost/charts/mattermost-team-edition/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mattermost-team-edition
  labels:
    app.kubernetes.io/name: mattermost-team-edition
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: mattermost-team-edition-6.6.28
spec:
  selector:
    app.kubernetes.io/name: mattermost-team-edition
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  type: ClusterIP
  ports:
  - port: 8065
    targetPort: http
    protocol: TCP
    name: mattermost-team-edition
---
# Source: repl-mattermost/charts/replicated/templates/replicated-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: replicated-0.0.1-alpha.17
    app.kubernetes.io/name: replicated
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.1-alpha.17"
    app.kubernetes.io/managed-by: Helm
  name: replicated
spec:
  ports:
  - name: http
    port: 3000
    targetPort: 3000
  selector:
    app.kubernetes.io/name: replicated
    app.kubernetes.io/instance: release-name
  type: ClusterIP
---
# Source: repl-mattermost/charts/mattermost-team-edition/charts/mysql/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-mysql
  namespace: xavpaice
  labels:
    app: release-name-mysql
    chart: "mysql-1.6.4"
    release: "release-name"
    heritage: "Helm"

spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: release-name-mysql
      release: release-name
  template:
    metadata:
      labels:
        app: release-name-mysql
        release: release-name
    spec:
      serviceAccountName: default
      initContainers:
      - name: "remove-lost-found"
        image: "busybox:1.31.1"
        imagePullPolicy: "IfNotPresent"
        resources:
          requests:
            cpu: 10m
            memory: 10Mi
        command:  ["rm", "-fr", "/var/lib/mysql/lost+found"]
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
      # - name: do-something
      #   image: busybox
      #   command: ['do', 'something']
      
      containers:
      - name: release-name-mysql
        image: "mysql:8.0.18"
        imagePullPolicy: "IfNotPresent"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-mysql
              key: mysql-root-password
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-mysql
              key: mysql-password
        - name: MYSQL_USER
          value: "samepleUser"
        - name: MYSQL_DATABASE
          value: "mattermost"
        ports:
        - name: mysql
          containerPort: 3306
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "mysqladmin ping -u root -p${MYSQL_ROOT_PASSWORD}"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "mysqladmin ping -u root -p${MYSQL_ROOT_PASSWORD}"
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
        # - name: extras
        #   mountPath: /usr/share/extras
        #   readOnly: true
        
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: release-name-mysql
      # - name: extras
      #   emptyDir: {}
---
# Source: repl-mattermost/charts/mattermost-team-edition/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-mattermost-team-edition
  labels:
    app.kubernetes.io/name: mattermost-team-edition
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: mattermost-team-edition-6.6.28
spec:
  replicas: 1
  strategy: 
    type: RollingUpdate
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mattermost-team-edition
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/managed-by: Helm
  template:
    metadata:
      annotations:
        checksum/config: 791ee11ac48b378c70d573405c15b49ca7978524ab00c7f06994fd849f15675d
      labels:
        app.kubernetes.io/name: mattermost-team-edition
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: mattermost-team-edition-6.6.28
    spec:
      initContainers:
      - name: "init-mysql"
        image: "appropriate/curl:latest"
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "until curl --max-time 10 http://release-name-mysql:3306; do echo waiting for release-name-mysql; sleep 5; done;"]
      containers:
      - name: mattermost-team-edition
        image: "mattermost/mattermost-team-edition:7.10.2@sha256:cfa8fc843912bf66f3085571632bd4b34db7ef4764bed6fa0652aa231d0668eb"
        imagePullPolicy: IfNotPresent
        env:
        - name: MM_CONFIG
          valueFrom:
            secretKeyRef:
              name: release-name-mattermost-team-edition-mattermost-dbsecret
              key: mattermost.dbsecret
        envFrom:
        - secretRef:
            name:  release-name-mattermost-team-edition-config
        ports:
        - name: http
          containerPort: 8065
          protocol: TCP
        livenessProbe:
          initialDelaySeconds: 90
          timeoutSeconds: 5
          periodSeconds: 15
          httpGet:
            path: /api/v4/system/ping
            port: http
        readinessProbe:
          initialDelaySeconds: 15
          timeoutSeconds: 5
          periodSeconds: 15
          httpGet:
            path: /api/v4/system/ping
            port: http
        volumeMounts:
        - mountPath: /mattermost/config
          name: mattermost-config
        - mountPath: /mattermost/data
          name: mattermost-data
        - mountPath: /mattermost/client/plugins
          name: mattermost-plugins
        resources:
            null
      volumes:
      - name: mattermost-config
        emptyDir: {}
      - name: mattermost-data
      
        persistentVolumeClaim:
          claimName: release-name-mattermost-team-edition
      
      - name: mattermost-plugins
      
        persistentVolumeClaim:
          
          claimName: release-name-mattermost-team-edition-plugins
---
# Source: repl-mattermost/charts/replicated/templates/replicated-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: replicated-0.0.1-alpha.17
    app.kubernetes.io/name: replicated
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.1-alpha.17"
    app.kubernetes.io/managed-by: Helm
  name: replicated
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: replicated
      app.kubernetes.io/instance: release-name
  strategy:
    # this is to avoid having two replicated instances reporting at the same time for different app versions.
    type: Recreate
  template:
    metadata:
      labels:
        helm.sh/chart: replicated-0.0.1-alpha.17
        app.kubernetes.io/name: replicated
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "v0.0.1-alpha.17"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
      - name: replicated
        image: ghcr.io/replicatedhq/replicated:v0.0.1-alpha.17
        imagePullPolicy: IfNotPresent
        envFrom:
        - secretRef:
            name: replicated
        env:
        - name: REPLICATED_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: IS_HELM_MANAGED
          value: "true"
        - name: HELM_RELEASE_NAME
          value: "release-name"
        - name: HELM_RELEASE_NAMESPACE
          value: "xavpaice"
        - name: HELM_RELEASE_REVISION
          value: "1"
        - name: HELM_PARENT_CHART_URL
          value: "oci://registry.replicated.com/repl-mattermost/unstable/repl-mattermost"
        - name: HELM_DRIVER
          value: secret # TODO: support other drivers
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 100Mi
      restartPolicy: Always
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      serviceAccountName: replicated
status: {}
---
# Source: repl-mattermost/charts/mattermost-team-edition/templates/ingress.yaml
apiVersion: "networking.k8s.io/v1"
kind: Ingress
metadata:
  name: release-name-mattermost-team-edition
  labels:
    app.kubernetes.io/name: mattermost-team-edition
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: mattermost-team-edition-6.6.28
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  
  - host: "mattermost.xavpaice.okteto.repldev.com"
    http:
      paths:
      - path: /
        backend:
          service:
            name: mattermost-team-edition
            port:
              number: 8065
        pathType: Prefix
---
# Source: repl-mattermost/charts/mattermost-team-edition/templates/tests/mattermost-test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-mattermost-team-edition-test-ifevq"
  labels:
    app.kubernetes.io/name: mattermost-team-edition
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: mattermost-team-edition-6.6.28
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
  - name: release-name-test
    image: bats/bats:v1.1.0
    command: ["/opt/bats/bin/bats", "-t", "/tests/run.sh"]
    volumeMounts:
    - mountPath: /tests
      name: tests
      readOnly: true
    - mountPath: /tools
      name: tools
  volumes:
  - name: tests
    configMap:
      name: release-name-mattermost-team-edition-tests
  - name: tools
    emptyDir: {}
  restartPolicy: Never
